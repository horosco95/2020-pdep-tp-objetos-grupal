import barrileteCosmico.*

//Instanciación de destinos:
const garlicSea = new Destino(nombre = "Garlic's Sea", precio = 2500, equipajeImprescindible = [ "Caña de pescar", "Piloto" ], kilometro = 10)

const silverSea = new Destino(nombre = "Silver's Sea", precio = 1350, equipajeImprescindible = [ "Protector solar", "Equipo de Buceo" ], kilometro = 20)

const lastToninas = new Destino(nombre = "Last Toninas", precio = 3500, equipajeImprescindible = [ "Vacuna grupal", "Vacuna B", "Necronomicon" ], kilometro = 30)

const goodAirs = new Destino(nombre = "Good Airs", precio = 1500, equipajeImprescindible = [ "Cerveza", "Protector solar" ], kilometro = 40)

test "Dado una empresa y una lista de destinos cargada, devolver el listado de destinos cargados" {
	barrileteCosmico.agregarDestino(garlicSea)
	barrileteCosmico.agregarDestino(silverSea)
	barrileteCosmico.agregarDestino(lastToninas)
	barrileteCosmico.agregarDestino(goodAirs)
	assert.equals([ "Garlic's Sea", "Silver's Sea", "Last Toninas", "Good Airs" ], barrileteCosmico.cartaDestinos())
}

test "Dado un descuento del 25% aplicado a un destino del barrilete cosmico, se mostrara el saldo modificado y el certificado de descuento aplicado" {
	barrileteCosmico.agregarDestino(garlicSea)
	barrileteCosmico.agregarDestino(lastToninas)
	barrileteCosmico.aplicarDescuento(25)
	assert.equals(1875, garlicSea.precio())
	assert.that(garlicSea.sugerenciasViaje().contains("Certificado de descuento"))
	assert.equals(2625, lastToninas.precio())
	assert.that(lastToninas.sugerenciasViaje().contains("Certificado de descuento"))
}

test "Dado un conjunto de destinos en donde uno es peligroso y que opera la empresa, la misma es extrema." {
	barrileteCosmico.agregarDestino(silverSea)
	barrileteCosmico.agregarDestino(lastToninas)
	barrileteCosmico.agregarDestino(goodAirs)
	assert.equals(true, barrileteCosmico.esExtrema())
}

test "Dada una empresa y un listado de destinos cargados en donde uno es destacado, devuelve el destino destacado" {
	barrileteCosmico.agregarDestino(silverSea)
	barrileteCosmico.agregarDestino(lastToninas)
	barrileteCosmico.agregarDestino(goodAirs)
	assert.equals([lastToninas], barrileteCosmico.obtenerDestinosImportantes() )
}

test "Dado un conjunto de destinos que no son peligrosos y que opera la empresa, la misma no es extrema." {
	barrileteCosmico.agregarDestino(silverSea)
	barrileteCosmico.agregarDestino(goodAirs)
	assert.notThat(barrileteCosmico.esExtrema())
}

test "Un usuario de la empresa, con saldo suficiente puede volar hacia un destino" {
	const pHari = new Usuario(nombre = "Pablo Hari", destinosConocidos = [ goodAirs ], saldo = 4000, origen = goodAirs)
	assert.that(pHari.puedeVolarA(silverSea, avion))
}

test "Un usuario de la empresa, con saldo insuficiente no puede volar hacia un destino" {
	const pHari = new Usuario(nombre = "Pablo Hari", destinosConocidos = [ silverSea ], saldo = 500, origen = silverSea)
	assert.notThat(pHari.puedeVolarA(goodAirs, avion))
}

test "Un usuario de la empresa, vuela hacia un destino efectivamente." {
	const pHari = new Usuario(nombre = "Pablo Hari", destinosConocidos = [ silverSea ], saldo = 5000, origen = silverSea)
	pHari.volarHaciaDestino(goodAirs, avion)
	assert.equals(pHari.destinosConocidos(), [ silverSea, goodAirs ])
	assert.equals(pHari.saldo(), 3200)
}

test "Un usuario de la empresa, decide volar hacia un destino y no cumple con condicion, por lo que no se ejecuta el vuelo." {
	const pHari = new Usuario(nombre = "Pablo Hari", destinosConocidos = [ silverSea ], saldo = 500, origen = silverSea )
	pHari.volarHaciaDestino(goodAirs, avion)
	assert.notEquals(pHari.destinosConocidos(), [ silverSea, goodAirs ])
	assert.equals(pHari.saldo(), 500)
}

test "Calcular kilometros recorridos por parte de un usuario con destinos conocidos se realiza efectivamente." {
	const pHari = new Usuario(nombre = "Pablo Hari", destinosConocidos = [ silverSea ], saldo = 9000, origen = silverSea)
	pHari.volarHaciaDestino(goodAirs, avion)
	assert.equals(pHari.obtenerKilometrosRecorridos(), 20)
}

test "Calcular kilometros recorridos por parte de un usuario sin destinos conocidos retorna cero" {
	const pHari = new Usuario(nombre = "Pablo Hari", destinosConocidos = [], saldo = 9000, origen = null)
	assert.equals(pHari.obtenerKilometrosRecorridos(), 0)
}

test "Un usuario de la empresa, agrega a otro a su lista de seguidos efectivamente" {
	const pHari = new Usuario(nombre = "Pablo Hari", destinosConocidos = [], saldo = 9000, origen = null)
	const anonymous = new Usuario(nombre = "Anonymous", destinosConocidos = [], saldo = 0, origen = null)
	
	pHari.seguirUsuario(anonymous)
	assert.that( pHari.usuariosSeguidos().equals([anonymous]) )
	assert.that( anonymous.usuariosSeguidos().equals([pHari]) )
}